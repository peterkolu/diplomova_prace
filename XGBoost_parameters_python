import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, make_scorer
import shap
import rasterio
import matplotlib.pyplot as plt

# training data
df = pd.read_csv("C:\\Users\\lucip\\Desktop\\diplomová práce\\vysledky\\agb_corine_onehot\\AGB_training_all_epsg25833.csv")

# selected predictors
features = ['NDVI', 'NDVI705', 'MSI', 'elevation', 'slope','forest_type_2018_1', 'forest_type_2018_2', 'forest_type_2018_3']
target = 'AGB'

# removing NaN
df = df.dropna(subset=features + [target])


# x and y definition
X = df[features].astype(float)
y = df[target]

X = X.astype(float)


model = xgb.XGBRegressor(
    n_estimators=300,
    max_depth=3,
    learning_rate=0.03,
    subsample=1.0,
    colsample_bytree=0.7,
    random_state=42
)
kfold = KFold(n_splits=5, shuffle=True, random_state=42)

neg_mse = cross_val_score(model, X, y, scoring=make_scorer(mean_squared_error, greater_is_better=False), cv=kfold)
rmse_scores = np.sqrt(-neg_mse)
mae_scores = -cross_val_score(model, X, y, scoring='neg_mean_absolute_error', cv=kfold)
r2_scores = cross_val_score(model, X, y, scoring='r2', cv=kfold)

# statistics
print(f"cross-validation (5-fold):")
print(f"  RMSE: {rmse_scores.mean():.2f}")
print(f"  MAE: {mae_scores.mean():.2f}")
print(f"  R²: {r2_scores.mean():.3f}")

# statistics visualization
fig, ax = plt.subplots(1, 3, figsize=(15, 4))
ax[0].bar(range(1, 6), rmse_scores)
ax[0].set_title("RMSE per fold")
ax[1].bar(range(1, 6), mae_scores, color="orange")
ax[1].set_title("MAE per fold")
ax[2].bar(range(1, 6), r2_scores, color="green")
ax[2].set_title("R² per fold")
plt.tight_layout()
plt.show()

# training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
me = np.mean(y_pred - y_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"testing:")
print(f"  RMSE: {rmse:.2f}")
print(f"  MAE: {mae:.2f}")
print(f"  R²: {r2:.3f}")
print(f"  ME: {me:.2f}")

# SHAP analysis
explainer = shap.Explainer(model, X_train)
shap_values = explainer(X_test)

shap.summary_plot(shap_values, X_test, plot_type="bar")
shap.summary_plot(shap_values, X_test)

shap_abs = np.abs(shap_values.values)
mean_shap = np.mean(shap_abs, axis=0)
shap_importance = pd.Series(mean_shap, index=X_test.columns).sort_values(ascending=False)
print("SHAP importance (mean(|SHAP|)):")
print(shap_importance.round(4))

shap_weights = shap_importance / shap_importance.sum()
print("Normalized SHAP weights:")
for var, weight in shap_weights.items():
    print(f"{var}: {weight:.4f}")

# SHAP plots
def plot_shap_dependence(ax, feature_name):
    shap_vals = shap_values.values[:, X_test.columns.get_loc(feature_name)]
    feature_vals = X_test[feature_name]
    
    sc = ax.scatter(feature_vals, shap_vals, alpha=0.5, s=20, c=feature_vals, cmap='coolwarm')
    ax.axhline(0, color='gray', linestyle='--')
    ax.set_xlabel(f"{feature_name}")
    ax.set_ylabel("SHAP value")
    ax.set_title(f"{feature_name}")
    ax.grid(True)
    
    
    df_temp = pd.DataFrame({
        'feature_value': feature_vals,
        'shap_value': shap_vals
    }).sort_values('feature_value')
    
    sign_change = df_temp['shap_value'].ge(0).astype(int).diff().abs()
    thresholds = df_temp.loc[sign_change == 1, 'feature_value']
    
    if not thresholds.empty:
        print(f"Hranice pro {feature_name} (změna znaménka SHAP):")
        for val in thresholds:
            print(f"  přibližně {val:.2f}")
    else:
        print(f"{feature_name}: žádný přechod SHAP hodnoty přes nulu")

    return sc


features_to_plot = ["slope", "elevation", "NDVI", "NDVI705", "MSI"]


n_cols = 2
n_rows = int(np.ceil(len(features_to_plot) / n_cols))

fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, 5 * n_rows))
axes = axes.flatten()


for i, feature in enumerate(features_to_plot):
    sc = plot_shap_dependence(axes[i], feature)


for j in range(len(features_to_plot), len(axes)):
    fig.delaxes(axes[j])

fig.tight_layout()
plt.colorbar(sc, ax=axes, orientation='vertical', fraction=0.02, pad=0.04, label='Hodnota prediktoru')
plt.show()



# normalized importance from XGBoost
importances = model.get_booster().get_score(importance_type='gain')
total = sum(importances.values())
weights = {k: v / total for k, v in importances.items()}
print("Normalized weights:")
for feature, weight in weights.items():
    print(f"{feature}: {weight:.4f}")


'''
# AGB estimate maps
years = [2018, 2019, 2020, 2021, 2022, 2023, 2024]
tif_paths = {

    2018: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2018_all.tif",
    2019: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2019_all.tif",
    2020: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2020_all.tif",
    2021: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2021_all.tif",
    2022: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2022_all.tif",
    2023: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2023_all.tif",
    2024: "C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/predictors_2024_all.tif"
}

def create_agb_map(tif_path, year):
    with rasterio.open(tif_path) as src:
        stack = src.read()
        profile = src.profile
    bands, rows, cols = stack.shape
    reshaped = stack.reshape(bands, -1).T
    valid_mask = ~np.isnan(reshaped).any(axis=1)
    preds = model.predict(reshaped[valid_mask])
    agb_map = np.full((rows * cols), np.nan, dtype=np.float32)
    agb_map[valid_mask] = preds
    agb_map = agb_map.reshape(rows, cols)
    profile.update(dtype=rasterio.float32, count=1, compress='lzw')
    out_path = f"C:/Users/lucip/Desktop/diplomová práce/vysledky/agb_corine_onehot/AGB_prediction_{year}.tif"
    with rasterio.open(out_path, "w", **profile) as dst:
        dst.write(agb_map.astype(rasterio.float32), 1)
    print(f"Uložena mapa pro rok {year}: {out_path}")

for year in years:
    create_agb_map(tif_paths[year], year)

'''
